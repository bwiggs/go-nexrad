package main

import (
	"image/color"

	"github.com/bwiggs/go-nexrad/archive2"
	"golang.org/x/image/colornames"
)

// ccColor Corollation Coefficient color spectrum
func ccColor(val float32) color.Color {
	gradient := []gradientValue{
		{0.275, colornames.Black},
		{0.35, colornames.Darkgrey},
		{0.4, colornames.Gray},
		{0.5, colornames.Silver},
		{0.6, colornames.Midnightblue},
		{0.7, colornames.Darkblue},
		{0.8, colornames.Blue},
		{0.91, colornames.Green},
		{0.92, colornames.Yellowgreen},
		{0.93, colornames.Olivedrab},
		{0.94, colornames.Yellow},
		{0.95, colornames.Gold},
		{0.96, colornames.Orange},
		{0.97, colornames.Orangered},
		{0.98, colornames.Red},
		{0.99, colornames.Firebrick},
		{1.0, colornames.Maroon},
		{1.01, colornames.Darkmagenta},
		{1.02, colornames.Purple},
		{1.03, colornames.Mediumvioletred},
		{1.04, colornames.Palevioletred},
		{1.045, colornames.Pink},
		{1.05, colornames.Lavenderblush},
	}

	for _, gv := range gradient {
		if val < gv.val {
			return gv.color
		}
	}

	return colornames.White
}

func swColor(swx float32) color.Color {

	gradient := []gradientValue{
		{1, colornames.Black},
		{2, color.RGBA{0x22, 0x22, 0x22, 0xff}},
		{3, color.RGBA{0x33, 0x33, 0x33, 0xff}},
		{4, color.RGBA{0x44, 0x44, 0x44, 0xff}},
		{5, color.RGBA{0x55, 0x55, 0x55, 0xff}},
		{6, color.RGBA{0x66, 0x66, 0x66, 0xff}},
		{7, color.RGBA{0x77, 0x77, 0x77, 0xff}},
		{8, color.RGBA{0x88, 0x88, 0x88, 0xff}},
		{9, color.RGBA{0x99, 0x99, 0x99, 0xff}},
		{10, colornames.Burlywood},
		{11, colornames.Sandybrown},
		{12, colornames.Gold},
		{13, colornames.Orange},
		{15, colornames.Orangered},
		{17, colornames.Red},
		{19, colornames.Firebrick},
		{23, colornames.Darkred},
		{25, colornames.Hotpink},
		{27, colornames.Fuchsia},
		{30, colornames.Lavender},
		{32, colornames.White},
		{35, colornames.Yellow},
		{60, colornames.Lime},
		{1000, colornames.Purple},
	}

	for _, gv := range gradient {
		if swx < gv.val {
			return gv.color
		}
	}

	return colornames.Black
}

type gradientValue struct {
	val   float32
	color color.RGBA
}

func zdrColorScope(zdr float32) color.Color {

	gradient := []gradientValue{
		{-3, colornames.Black},
		{-1, color.RGBA{0x33, 0x33, 0x33, 0xFF}},
		{-0.5, color.RGBA{0x66, 0x66, 0x66, 0xFF}},
		{0.1, color.RGBA{0x99, 0x99, 0x99, 0xFF}},
		{0, color.RGBA{0xcc, 0xcc, 0xcc, 0xFF}},
		{0.1, colornames.White},
		{0.25, colornames.Navy},
		{0.5, colornames.Blue},
		{0.75, colornames.Deepskyblue},
		{1, colornames.Cyan},
		{1.25, colornames.Mediumaquamarine},
		{1.5, colornames.Lime},
		{1.75, colornames.Yellowgreen},
		{2, colornames.Yellow},
		{2.5, colornames.Gold},
		{3, colornames.Orange},
		{4, colornames.Orangered},
		{5, colornames.Red},
		{6, colornames.Maroon},
		{7, colornames.Hotpink},
		{10, colornames.Pink},
		{999, colornames.White},
	}

	for _, gv := range gradient {
		if zdr < gv.val {
			return gv.color
		}
	}

	return colornames.White
}

func dbzPink(dbz float32) color.Color {

	gradient := []gradientValue{
		{1, colornames.Black},
		{2, color.RGBA{0x11, 0x11, 0x11, 0xFF}},
		{4, color.RGBA{0x22, 0x22, 0x22, 0xFF}},
		{6, color.RGBA{0x33, 0x33, 0x33, 0xFF}},
		{8, color.RGBA{0x44, 0x44, 0x44, 0xFF}},
		{10, color.RGBA{0x55, 0x55, 0x55, 0xFF}},
		{15, colornames.Rosybrown},
		{17.5, colornames.Lightsalmon},
		{20.0, colornames.Darksalmon},
		{22.5, colornames.Salmon},
		{25.0, colornames.Lightcoral},
		{30.0, colornames.Indianred},
		{35.0, colornames.Mediumspringgreen},
		{37.5, colornames.Mediumseagreen},
		{40.0, colornames.Green},
		{45.0, colornames.Khaki},
		{50.0, colornames.Gold},
		{52.5, colornames.Orange},
		{55.0, colornames.Darkorange},
		{57.5, colornames.Orangered},
		{60.0, colornames.Red},
		{62.5, colornames.Firebrick},
		{65.0, colornames.Darkred},
		{67.5, colornames.Navy},
		{70.0, colornames.Blue},
		{75.0, colornames.White},
	}

	for _, gv := range gradient {
		if dbz < gv.val {
			return gv.color
		}
	}

	return colornames.Purple
}

func dbzColorCleanAirMode(dbz float32) color.Color {
	if dbz < -28.0 {
		return colornames.Black
	} else if dbz >= -28.0 && dbz < -24.0 {
		return color.NRGBA{0x9C, 0x9C, 0x9C, 0xFF}
	} else if dbz >= -24.0 && dbz < -20.0 {
		return color.NRGBA{0x76, 0x76, 0x76, 0xFF}
	} else if dbz >= -20.0 && dbz < -16.0 {
		return color.NRGBA{0xFF, 0xAA, 0xAA, 0xFF}
	} else if dbz >= -16.0 && dbz < -12.0 {
		return color.NRGBA{0xEE, 0x8C, 0x8C, 0xFF}
	} else if dbz >= -12.0 && dbz < -8.0 {
		return color.NRGBA{0xC9, 0x70, 0x70, 0xFF}
	} else if dbz >= -8.0 && dbz < -4.0 {
		return color.NRGBA{0x00, 0xFB, 0x90, 0xFF}
	} else if dbz >= -4.0 && dbz < 0.0 {
		return color.NRGBA{0x00, 0xBB, 0x00, 0xFF}
	} else if dbz >= 0.0 && dbz < 4.0 {
		return color.NRGBA{0xFF, 0xFF, 0x70, 0xFF}
	} else if dbz >= 4.0 && dbz < 8.0 {
		return color.NRGBA{0xD0, 0xD0, 0x60, 0xFF}
	} else if dbz >= 8.0 && dbz < 12.0 {
		return color.NRGBA{0xFF, 0x60, 0x60, 0xFF}
	} else if dbz >= 12.0 && dbz < 16.0 {
		return color.NRGBA{0xDA, 0x00, 0x00, 0xFF}
	} else if dbz >= 16.0 && dbz < 20.0 {
		return color.NRGBA{0xAE, 0x00, 0x00, 0xFF}
	} else if dbz >= 20.0 && dbz < 24.0 {
		return color.NRGBA{0x00, 0x00, 0xFF, 0xFF}
	} else if dbz >= 24.0 && dbz < 28.0 {
		return color.NRGBA{0xFF, 0xFF, 0xFF, 0xFF}
	}
	return color.NRGBA{0xE7, 0x00, 0xFF, 0xFF}
}

func dbzColorNOAA(dbz float32) color.Color {
	if dbz < 5.0 || dbz == archive2.MomentDataFolded {
		return color.NRGBA{0x00, 0x00, 0x00, 0x00}
	} else if dbz >= 5.0 && dbz < 10.0 {
		return color.NRGBA{0x40, 0xe8, 0xe3, 0xFF}
	} else if dbz >= 10.0 && dbz < 15.0 {
		// 26A4FA
		return color.NRGBA{0x26, 0xa4, 0xfa, 0xFF}
	} else if dbz >= 15.0 && dbz < 20.0 {
		// 0030ED
		return color.NRGBA{0x00, 0x30, 0xed, 0xFF}
	} else if dbz >= 20.0 && dbz < 25.0 {
		// 49FB3E
		return color.NRGBA{0x49, 0xfb, 0x3e, 0xFF}
	} else if dbz >= 25.0 && dbz < 30.0 {
		// 36C22E
		return color.NRGBA{0x36, 0xc2, 0x2e, 0xFF}
	} else if dbz >= 30.0 && dbz < 35.0 {
		// 278C1E
		return color.NRGBA{0x27, 0x8c, 0x1e, 0xFF}
	} else if dbz >= 35.0 && dbz < 40.0 {
		// FEF543
		return color.NRGBA{0xfe, 0xf5, 0x43, 0xFF}
	} else if dbz >= 40.0 && dbz < 45.0 {
		// EBB433
		return color.NRGBA{0xeb, 0xb4, 0x33, 0xFF}
	} else if dbz >= 45.0 && dbz < 50.0 {
		// F6952E
		return color.NRGBA{0xf6, 0x95, 0x2e, 0xFF}
	} else if dbz >= 50.0 && dbz < 55.0 {
		// F80A26
		return color.NRGBA{0xf8, 0x0a, 0x26, 0xFF}
	} else if dbz >= 55.0 && dbz < 60.0 {
		// CB0516
		return color.NRGBA{0xcb, 0x05, 0x16, 0xFF}
	} else if dbz >= 60.0 && dbz < 65.0 {
		// A90813
		return color.NRGBA{0xa9, 0x08, 0x13, 0xFF}
	} else if dbz >= 65.0 && dbz < 70.0 {
		// EE34FA
		return color.NRGBA{0xee, 0x34, 0xfa, 0xFF}
	} else if dbz >= 70.0 && dbz < 75.0 {
		return color.NRGBA{0x91, 0x61, 0xc4, 0xFF}
	}
	return color.NRGBA{0xff, 0xff, 0xFF, 0xFF}
}

func dbzColorScopeClassic(dbz float32) color.Color {
	if dbz < 5.0 {
		return colornames.Black
	} else if dbz >= 5.0 && dbz < 10.0 {
		return color.NRGBA{0x02, 0x0d, 0x02, 0xFF}
	} else if dbz >= 10.0 && dbz < 15.0 {
		return color.NRGBA{0x04, 0x23, 0x03, 0xFF}
	} else if dbz >= 15.0 && dbz < 20.0 {
		return color.NRGBA{0x11, 0x52, 0x0d, 0xFF}
	} else if dbz >= 20.0 && dbz < 25.0 {
		return color.NRGBA{0x33, 0xba, 0x2b, 0xFF}
	} else if dbz >= 25.0 && dbz < 30.0 {
		return color.NRGBA{0x43, 0xeb, 0x39, 0xFF}
	} else if dbz >= 30.0 && dbz < 35.0 {
		return color.NRGBA{0xff, 0xFB, 0x45, 0xFF}
	} else if dbz >= 35.0 && dbz < 40.0 {
		return color.NRGBA{0xf5, 0xcb, 0x39, 0xFF}
	} else if dbz >= 40.0 && dbz < 45.0 {
		return color.NRGBA{0xFb, 0xab, 0x32, 0xFF}
	} else if dbz >= 45.0 && dbz < 50.0 {
		return color.NRGBA{0xfa, 0x83, 0x2a, 0xFF}
	} else if dbz >= 50.0 && dbz < 55.0 {
		return color.NRGBA{0xbb, 0x03, 0x13, 0xFF}
	} else if dbz >= 55.0 && dbz < 60.0 {
		return color.NRGBA{0xf7, 0x06, 0x1d, 0xFF}
	} else if dbz >= 60.0 && dbz < 65.0 {
		return color.NRGBA{0xf9, 0x64, 0x69, 0xFF}
	} else if dbz >= 65.0 && dbz < 70.0 {
		return color.NRGBA{0xfa, 0x97, 0xcc, 0xFF}
	} else if dbz >= 70.0 && dbz < 75.0 {
		return color.NRGBA{0xf7, 0x34, 0xf9, 0xFF}
	}
	return color.NRGBA{0xff, 0xff, 0xFF, 0xFF}
}

func velColorScope(vel float32) color.Color {
	if vel == archive2.MomentDataFolded {
		return color.NRGBA{0x69, 0x1A, 0xC1, 0xff}
	}

	colors := []color.Color{
		color.NRGBA{0xF9, 0x14, 0x73, 0xff}, // 140
		color.NRGBA{0xAA, 0x10, 0x79, 0xff}, // 130
		color.NRGBA{0x6E, 0x0E, 0x80, 0xff}, // 120
		color.NRGBA{0x2E, 0x0E, 0x84, 0xff}, // 110
		color.NRGBA{0x15, 0x1F, 0x93, 0xff}, // 100
		color.NRGBA{0x23, 0x6F, 0xB3, 0xff}, // 90
		color.NRGBA{0x41, 0xDA, 0xDB, 0xff}, // 80
		color.NRGBA{0x66, 0xE1, 0xE2, 0xff}, // 70
		color.NRGBA{0x9E, 0xE8, 0xEA, 0xff}, // 60
		color.NRGBA{0x57, 0xFA, 0x63, 0xff}, // 50
		color.NRGBA{0x31, 0xE3, 0x2B, 0xff}, // 40
		// color.NRGBA{0x21, 0xBE, 0x0A, 0xff}, // 35
		color.NRGBA{0x24, 0xAA, 0x1F, 0xff}, // 30
		color.NRGBA{0x19, 0x76, 0x13, 0xff}, // 20
		color.NRGBA{0x45, 0x67, 0x42, 0xff}, // -10
		color.NRGBA{0x63, 0x4F, 0x50, 0xff}, // 0
		color.NRGBA{0x6e, 0x2e, 0x39, 0xff}, // 10
		color.NRGBA{0x7F, 0x03, 0x0C, 0xff}, // 20
		color.NRGBA{0xB6, 0x07, 0x16, 0xff}, // 30
		// color.NRGBA{0xC5, 0x00, 0x0D, 0xff}, // 35
		color.NRGBA{0xF3, 0x22, 0x45, 0xff}, // 40
		color.NRGBA{0xF6, 0x50, 0x8A, 0xff}, // 50
		color.NRGBA{0xFB, 0x8B, 0xBF, 0xff}, // 60
		color.NRGBA{0xFD, 0xDE, 0x93, 0xff}, // 70
		color.NRGBA{0xFC, 0xB4, 0x70, 0xff}, // 80
		color.NRGBA{0xFA, 0x81, 0x4B, 0xff}, // 90
		color.NRGBA{0xDD, 0x60, 0x3C, 0xff}, // 100
		color.NRGBA{0xB7, 0x45, 0x2D, 0xff}, // 110
		color.NRGBA{0x93, 0x2C, 0x20, 0xff}, // 120
		color.NRGBA{0x71, 0x16, 0x14, 0xff}, // 130
		color.NRGBA{0x52, 0x01, 0x06, 0xff}, // 140
	}

	// if vel < -140 {
	// 	return color.NRGBA{0x69, 0x1A, 0xC1, 0xff} // -140+
	// } else if vel > 140 {
	// 	return color.NRGBA{0xff, 0xff, 0xff, 0xff} // 140+
	// }

	i := scaleInt(int32(vel), 140, -140, int32(len(colors))-1, 0)
	// logrus.Debugf("converted %4f to %2d", vel, i)
	return colors[i]
}

func dbzColorScope(dbz float32) color.Color {
	colors := []color.Color{
		color.NRGBA{0x03, 0x03, 0x03, 0xff}, // 0
		color.NRGBA{0x09, 0x0A, 0x0A, 0xff},
		color.NRGBA{0x0F, 0x11, 0x14, 0xff},
		color.NRGBA{0x12, 0x15, 0x1A, 0xff},
		color.NRGBA{0x14, 0x19, 0x20, 0xff},
		color.NRGBA{0x16, 0x1B, 0x26, 0xff},
		color.NRGBA{0x16, 0x1D, 0x2C, 0xff},
		color.NRGBA{0x16, 0x1E, 0x31, 0xff},
		color.NRGBA{0x17, 0x21, 0x3A, 0xff},
		color.NRGBA{0x19, 0x25, 0x3F, 0xff},
		color.NRGBA{0x17, 0x21, 0x3A, 0xff}, // 10
		color.NRGBA{0x1D, 0x2D, 0x47, 0xff},
		color.NRGBA{0x23, 0x37, 0x52, 0xff},
		color.NRGBA{0x28, 0x41, 0x5C, 0xff},
		color.NRGBA{0x2E, 0x4C, 0x67, 0xff},
		color.NRGBA{0x34, 0x58, 0x72, 0xff},
		color.NRGBA{0x37, 0x5E, 0x77, 0xff},
		color.NRGBA{0x42, 0x73, 0x8A, 0xff},
		color.NRGBA{0x46, 0x7B, 0x90, 0xff},
		color.NRGBA{0x4E, 0x8C, 0x9D, 0xff},
		color.NRGBA{0x39, 0x9F, 0x5D, 0xff}, //20
		color.NRGBA{0x2F, 0xA2, 0x3E, 0xff},
		color.NRGBA{0x2C, 0x9B, 0x3A, 0xff},
		color.NRGBA{0x25, 0x86, 0x2D, 0xff},
		color.NRGBA{0x20, 0x78, 0x25, 0xff},
		color.NRGBA{0x1E, 0x72, 0x21, 0xff},
		color.NRGBA{0x16, 0x59, 0x13, 0xff},
		color.NRGBA{0x14, 0x53, 0x11, 0xff},
		color.NRGBA{0x32, 0x71, 0x15, 0xff},
		color.NRGBA{0x5C, 0x92, 0x1C, 0xff},
		color.NRGBA{0xA6, 0xC7, 0x2A, 0xff}, // 30
		color.NRGBA{0xC1, 0xD9, 0x2F, 0xff},
		color.NRGBA{0xF6, 0xF9, 0x38, 0xff},
		color.NRGBA{0xF1, 0xF3, 0x37, 0xff},
		color.NRGBA{0xED, 0xEC, 0x35, 0xff},
		color.NRGBA{0xE0, 0xDA, 0x31, 0xff},
		color.NRGBA{0xD6, 0xCD, 0x2E, 0xff},
		color.NRGBA{0xC8, 0xBB, 0x2A, 0xff},
		color.NRGBA{0xC8, 0xBB, 0x2A, 0xff},
		color.NRGBA{0xBB, 0xAA, 0x26, 0xff},
		color.NRGBA{0xF4, 0x81, 0x25, 0xff}, // 40
		color.NRGBA{0xEA, 0x79, 0x24, 0xff},
		color.NRGBA{0xE1, 0x73, 0x22, 0xff},
		color.NRGBA{0xD8, 0x6D, 0x20, 0xff},
		color.NRGBA{0xCF, 0x67, 0x1F, 0xff},
		color.NRGBA{0xC6, 0x60, 0x1E, 0xff},
		color.NRGBA{0xC2, 0x5D, 0x1D, 0xff},
		color.NRGBA{0xB4, 0x54, 0x1B, 0xff},
		color.NRGBA{0xB0, 0x51, 0x1A, 0xff},
		color.NRGBA{0xA3, 0x48, 0x19, 0xff},
		color.NRGBA{0xF1, 0x0C, 0x20, 0xff}, // 50
		color.NRGBA{0xE1, 0x0D, 0x1E, 0xff},
		color.NRGBA{0xDA, 0x10, 0x1D, 0xff},
		color.NRGBA{0xC4, 0x13, 0x1C, 0xff},
		color.NRGBA{0xBD, 0x14, 0x1B, 0xff},
		color.NRGBA{0xA8, 0x16, 0x1B, 0xff},
		color.NRGBA{0xA1, 0x17, 0x1A, 0xff},
		color.NRGBA{0x8C, 0x19, 0x1A, 0xff},
		color.NRGBA{0x86, 0x19, 0x1A, 0xff},
		color.NRGBA{0x72, 0x1B, 0x1A, 0xff},
		color.NRGBA{0xBC, 0x86, 0xA4, 0xff}, // 60
		color.NRGBA{0xBA, 0x76, 0x9D, 0xff},
		color.NRGBA{0xB9, 0x68, 0x95, 0xff},
		color.NRGBA{0xB7, 0x5B, 0x8D, 0xff},
		color.NRGBA{0xB6, 0x4E, 0x86, 0xff},
		color.NRGBA{0xB4, 0x41, 0x7E, 0xff},
		color.NRGBA{0xB4, 0x3B, 0x7A, 0xff},
		color.NRGBA{0xB3, 0x28, 0x70, 0xff},
		color.NRGBA{0xB2, 0x1D, 0x69, 0xff},
		color.NRGBA{0xB0, 0x0C, 0x5F, 0xff},
		color.NRGBA{0x85, 0x1E, 0xD5, 0xff}, // 70
		color.NRGBA{0x7B, 0x1C, 0xCA, 0xff},
		color.NRGBA{0x75, 0x1B, 0xC4, 0xff},
		color.NRGBA{0x66, 0x18, 0xB5, 0xff},
		color.NRGBA{0x5E, 0x16, 0xAB, 0xff},
		color.NRGBA{0x54, 0x14, 0xA1, 0xff},
		color.NRGBA{0x4F, 0x13, 0x9C, 0xff},
		color.NRGBA{0x43, 0x10, 0x8E, 0xff},
		color.NRGBA{0x3A, 0x0E, 0x85, 0xff},
		color.NRGBA{0x2E, 0x0B, 0x77, 0xff},
	}

	if int(dbz) >= 0 && int(dbz) < len(colors) {
		return colors[int(dbz)]
	}
	return colornames.Black
}
